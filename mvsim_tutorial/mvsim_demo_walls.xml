<mvsim_world version="1.0">
	<!-- General simulation options -->
	<simul_timestep>0.005</simul_timestep> <!-- Simulation fixed-time interval for numerical integration -->

	<!-- GUI options -->
	<gui>
		<ortho>false</ortho>
		<show_forces>true</show_forces>  <force_scale>0.01</force_scale>
		<cam_distance>35</cam_distance>
		<fov_deg>35</fov_deg>
		<refresh_fps>20</refresh_fps>
		<!-- <follow_vehicle>r1</follow_vehicle> -->
	</gui>


	<!-- ========================
		   Scenario definition
	     ======================== -->
	<!-- ground grid (for visual reference) -->
	<element class="ground_grid">
		<floating>true</floating>
	</element>

	<!-- ground -->
	<element class="horizontal_plane">
		<cull_face>BACK</cull_face>
		<x_min>-20</x_min>
		<y_min>-20</y_min>
		<x_max> 20</x_max>
		<y_max> 20</y_max>
		<z>0.0</z>
	</element>

	<!-- ceiling -->
	<element class="horizontal_plane">
		<cull_face>FRONT</cull_face>
		<x_min>-20</x_min>
		<y_min>-20</y_min>
		<x_max> 20</x_max>
		<y_max> 20</y_max>
		<z>3.5</z>
	</element>

	<!-- =============================
		   Vehicle classes definition
	     ============================= -->
	<vehicle:class name="car_ackermann">

		<!--  Dynamical model -->
		<dynamics class="ackermann">
			<!-- Params -->
			<rl_wheel pos="0  1" mass="6.0" width="0.30" diameter="0.62" />
			<rr_wheel pos="0 -1" mass="6.0" width="0.30" diameter="0.62" />
			<fl_wheel mass="6.0" width="0.30" diameter="0.62" />
			<fr_wheel mass="6.0" width="0.30" diameter="0.62" />
			<f_wheels_x>1.3</f_wheels_x>
			<f_wheels_d>2.0</f_wheels_d>
			<max_steer_ang_deg>30.0</max_steer_ang_deg>

			<chassis mass="800.0" zmin="0.15" zmax="1.2">
			</chassis>

			<!--   Motor controller -->
			<controller class="twist_front_steer_pid">
				<!-- Params -->
				<KP>1500</KP>  <KI>50</KI> <I_MAX>20</I_MAX> <KD>0</KD>
				<V>0.0</V><W>0</W>
				<max_torque>600</max_torque>
			</controller>

		</dynamics>

		<!-- Friction force simulation -->
		<friction class="default">
			<mu>0.7</mu>
			<C_damping>10</C_damping>
		</friction>

		<!-- Sensors: -->
		<sensor class="laser" name="laser1">
			<pose> 1.80  0.0  0.0 </pose>
			<fov_degrees>180</fov_degrees>
			<nrays>181</nrays>
			<range_std_noise>0.01</range_std_noise>
			<angle_std_noise_deg>0.01</angle_std_noise_deg>
			<raytrace_3d>true</raytrace_3d>
		</sensor>
		<sensor class="laser" name="laser2">
			<pose> -1.0  0.0  180.0 </pose>
			<fov_degrees>180</fov_degrees>
			<sensor_period>0.05</sensor_period>
			<nrays>181</nrays>
			<range_std_noise>0.01</range_std_noise>
			<angle_std_noise_deg>0.01</angle_std_noise_deg>
			<raytrace_3d>true</raytrace_3d>
		</sensor>

		<sensor class="rgbd_camera" name="camera1">
		
			<!--
			 * pose_3d: Pose of the depth sensor on the robot (+X forward)
			 * relativePoseIntensityWRTDepth: RGB camera wrt depth sensor (+Z forward, and possibly an offset)
			 See: https://docs.mrpt.org/reference/latest/class_mrpt_obs_CObservation3DRangeScan.html
			-->
			<pose_3d> 1.8  0.0  1.50   0.0 0.0 0.0</pose_3d>
			<relativePoseIntensityWRTDepth>0.0 0.0 0.0  -90.0 0.0 -90.0</relativePoseIntensityWRTDepth>

			<sensor_period>0.1</sensor_period>

			<!-- <save_to_rawlog>dataset_depth_cam.rawlog</save_to_rawlog> -->

			<depth_ncols>640</depth_ncols>
			<depth_nrows>480</depth_nrows>
			<depth_cx>320</depth_cx>
			<depth_cy>120</depth_cy>
			<depth_fx>200</depth_fx>
			<depth_fy>200</depth_fy>
			<depth_resolution>1e-3</depth_resolution>
			<depth_clip_min>0.01</depth_clip_min>
			<depth_clip_max>10.0</depth_clip_max>

			<rgb_ncols>640</rgb_ncols>
			<rgb_nrows>480</rgb_nrows>
			<rgb_cx>320</rgb_cx>
			<rgb_cy>120</rgb_cy>
			<rgb_fx>200</rgb_fx>
			<rgb_fy>200</rgb_fy>
			<rgb_clip_min>1e-2</rgb_clip_min>
			<rgb_clip_max>1e+4</rgb_clip_max>
			
			<depth_noise_sigma>1e-3</depth_noise_sigma>
			<show_3d_pointcloud>true</show_3d_pointcloud>

		</sensor>
	</vehicle:class>

	<!-- ========================
		   Vehicle(s) definition
	     ======================== -->
	<vehicle name="r1" class="car_ackermann">
		<init_pose>5 10 0</init_pose>  <!-- In global coords: x,y, yaw(deg) -->
		<init_vel>0 0 0</init_vel>  <!-- In local coords: vx,vy, omega(deg/s) -->
	</vehicle>

	<!-- ======================================
	      Walls
	     ====================================== -->
	<walls>
	  <color>#505050</color>
	  <model_uri>testWalls.dae</model_uri>
	  <wallThickness>0.10</wallThickness>
	</walls>

</mvsim_world>

<mvsim_world version="1.0">
	<!-- General simulation options -->
	<simul_timestep>0.010</simul_timestep> <!-- Simulation fixed-time interval for numerical integration -->
	<b2d_vel_iters>3</b2d_vel_iters>
	<b2d_pos_iters>3</b2d_pos_iters>

	<!-- GUI options -->
	<gui>
		<ortho>false</ortho>
		<show_forces>true</show_forces>  <force_scale>0.01</force_scale>
		<cam_distance>35</cam_distance>
		<fov_deg>35</fov_deg>
		<refresh_fps>20</refresh_fps>
		<!-- <follow_vehicle>r1</follow_vehicle> -->
	</gui>


	<!-- ========================
		   Scenario definition
	     ======================== -->
<!--	<element class="occupancy_grid">
		<file>mvsim_demo_world1.png</file>
		<resolution>0.5</resolution>
		<centerpixel_x>100</centerpixel_x>
		<centerpixel_y>100</centerpixel_y>
	</element>
-->
	<!-- ground -->
	<element class="horizontal_plane">
		<cull_face>BACK</cull_face>
		<x_min>-20</x_min>
		<y_min>-20</y_min>
		<x_max> 20</x_max>
		<y_max> 20</y_max>
		<z>0.0</z>
	</element>

	<!-- ground grid (for visual reference) -->
	<element class="ground_grid">
		<!--<floating>true</floating>-->
	</element>

	<!-- =============================
		   Vehicle classes definition
	     ============================= -->
	<vehicle:class name="small_robot">

		<!--  Dynamical model -->
		<dynamics class="differential">
			<!-- Params -->
			<l_wheel pos="0.0  0.5" mass="4.0" width="0.20" diameter="0.40" />
			<r_wheel pos="0.0 -0.5" mass="4.0" width="0.20" diameter="0.40" />
			<chassis mass="15.0" zmin="0.05" zmax="0.6">
			</chassis>

			<!--   Motor controller -->
			<controller class="twist_pid">
				<!-- Params -->
				<KP>100</KP>  <KI>5</KI> <I_MAX>10</I_MAX> <KD>0</KD>
				<V>0.0</V><W>0</W>
				<max_torque>25</max_torque>
			</controller>

		</dynamics>

		<!-- Friction force simulation -->
		<friction class="default">
			<mu>0.7</mu>
			<C_damping>0.4</C_damping>
		</friction>

		<!-- Sensors: -->
		<sensor class="laser" name="laser1">
			<pose> 0.60  0.0  0.0 </pose>
			<fov_degrees>180</fov_degrees>
			<nrays>181</nrays>
			<range_std_noise>0.01</range_std_noise>
			<angle_std_noise_deg>0.01</angle_std_noise_deg>
			<raytrace_3d>true</raytrace_3d>
			<publish>
			  <publish_topic>/${PARENT_NAME}/${NAME}</publish_topic>
			</publish>
		</sensor>

		<sensor class="rgbd_camera" name="camera1">
		
			<!--
			 * pose_3d: Pose of the depth sensor on the robot (+X forward)
			 * relativePoseIntensityWRTDepth: RGB camera wrt depth sensor (+Z forward, and possibly an offset)
			 See: https://docs.mrpt.org/reference/latest/class_mrpt_obs_CObservation3DRangeScan.html
			-->
			<pose_3d> 0.65  0.0  1.00   0.0 0.0 0.0</pose_3d>
			<relativePoseIntensityWRTDepth>0.0 0.0 0.0  -90.0 0.0 -90.0</relativePoseIntensityWRTDepth>

			<sensor_period>0.1</sensor_period>

			<!-- <save_to_rawlog>dataset_depth_cam.rawlog</save_to_rawlog> -->

			<depth_ncols>640</depth_ncols>
			<depth_nrows>480</depth_nrows>
			<depth_cx>320</depth_cx>
			<depth_cy>120</depth_cy>
			<depth_fx>200</depth_fx>
			<depth_fy>200</depth_fy>
			<depth_resolution>1e-3</depth_resolution>
			<depth_clip_min>0.01</depth_clip_min>
			<depth_clip_max>10.0</depth_clip_max>

			<rgb_ncols>640</rgb_ncols>
			<rgb_nrows>480</rgb_nrows>
			<rgb_cx>320</rgb_cx>
			<rgb_cy>120</rgb_cy>
			<rgb_fx>200</rgb_fx>
			<rgb_fy>200</rgb_fy>
			<rgb_clip_min>1e-2</rgb_clip_min>
			<rgb_clip_max>1e+4</rgb_clip_max>

		</sensor>
	</vehicle:class>

	<vehicle:class name="car_ackermann">

		<!--  Dynamical model -->
		<dynamics class="ackermann">
			<!-- Params -->
			<rl_wheel pos="0  1" mass="6.0" width="0.30" diameter="0.62" />
			<rr_wheel pos="0 -1" mass="6.0" width="0.30" diameter="0.62" />
			<fl_wheel mass="6.0" width="0.30" diameter="0.62" />
			<fr_wheel mass="6.0" width="0.30" diameter="0.62" />
			<f_wheels_x>1.3</f_wheels_x>
			<f_wheels_d>2.0</f_wheels_d>
			<max_steer_ang_deg>30.0</max_steer_ang_deg>

			<chassis mass="800.0" zmin="0.15" zmax="1.2">
			</chassis>

			<!--   Motor controller -->
			<controller class="twist_front_steer_pid">
				<!-- Params -->
				<KP>1500</KP>  <KI>50</KI> <I_MAX>20</I_MAX> <KD>0</KD>
				<V>0.0</V><W>0</W>
				<max_torque>600</max_torque>
			</controller>

		</dynamics>

		<!-- Friction force simulation -->
		<friction class="default">
			<mu>0.7</mu>
			<C_damping>10</C_damping>
		</friction>

		<!-- Sensors: -->
		<sensor class="laser" name="laser1">
			<pose> 1.80  0.0  0.0 </pose>
			<fov_degrees>180</fov_degrees>
			<nrays>181</nrays>
			<range_std_noise>0.01</range_std_noise>
			<angle_std_noise_deg>0.01</angle_std_noise_deg>
			<raytrace_3d>true</raytrace_3d>
			<publish>
			  <publish_topic>/${PARENT_NAME}/${NAME}</publish_topic>
			</publish>
		</sensor>

		<!--  Custom visualization model -->
		<!-- 3D model filename to load (local or remote http://uri ) -->
		<!--
		<visual>
			<model_uri>robot.obj</model_uri>
			<model_scale>1e-3</model_scale>
			<model_offset_x>0.0</model_offset_x>
			<model_offset_y>0.0</model_offset_y>
			<model_offset_z>0.0</model_offset_z>
		</visual>
		-->
	</vehicle:class>

	<!-- ========================
		   Vehicle(s) definition
	     ======================== -->
	<vehicle name="r1" class="small_robot">
		<init_pose>0 0 0</init_pose>  <!-- In global coords: x,y, yaw(deg) -->
		<init_vel>0 0 0</init_vel>  <!-- In local coords: vx,vy, omega(deg/s) -->

		<publish>
		  <publish_pose_topic>/${NAME}/pose</publish_pose_topic>
		  <publish_pose_period>50e-3</publish_pose_period>
		</publish>
	</vehicle>

	<vehicle name="r2" class="car_ackermann">
		<init_pose>-10.0 0 0</init_pose>  <!-- In global coords: x,y, yaw(deg) -->
		<init_vel>0 0 0</init_vel>  <!-- In local coords: vx,vy, omega(deg/s) -->

		<publish>
		  <publish_pose_topic>/${NAME}/pose</publish_pose_topic>
		  <publish_pose_period>50e-3</publish_pose_period>
		</publish>
	</vehicle>


	<!-- ======================================
	      Obstacle blocks classes definition
	     ====================================== -->
	<block:class name="square_obstacle">
		<mass>20</mass>
		<color>#0080ff</color>
		<zmax>1.5</zmax>
		<ground_friction>0.3</ground_friction>
		<shape>
			<pt>-1.0 -0.6</pt>
			<pt>-1.0  0.6</pt>
			<pt> 1.0  0.5</pt>
			<pt> 1.0 -0.5</pt>
		</shape>
	</block:class>

	<block:class name="obstacle_table">
		<mass>30</mass>
		<color>#0080ff</color>
		<zmax>1.0</zmax>
		<ground_friction>0.5</ground_friction>
		<shape>
			<pt>-1.262 -0.631</pt>
			<pt>-1.262  0.631</pt>
			<pt> 1.262  0.631</pt>
			<pt> 1.262 -0.631</pt>
		</shape>
		<!--  Custom visualization model -->
		<!-- 3D model filename to load (local or remote http://uri ) -->
		<visual>
			<model_uri>table1.obj</model_uri>
			<model_scale>0.025</model_scale>
			<model_offset_x>0.0</model_offset_x>
			<model_offset_y>0.0</model_offset_y>
			<model_offset_z>0.26</model_offset_z>
			<model_yaw>0.0</model_yaw>
			<model_pitch>0.0</model_pitch>
			<model_roll>90.0</model_roll>
		</visual>
	</block:class>

	<block:class name="nurse_station">
		<mass>300</mass>
		<color>#0080ff</color>
		<zmax>2.0</zmax>
		<ground_friction>100.0</ground_friction>
		<shape_from_visual/> <!-- automatic size from 3D model file -->
		<!--  Custom visualization model -->
		<!-- 3D model filename to load (local or remote http://uri ) -->
		<visual>
			<model_uri>../models/aws_robomaker_hospital_nursesstation_01_visual.dae</model_uri>
			<model_scale>1.0</model_scale>
			<model_offset_x>0.0</model_offset_x>
			<model_offset_y>0.0</model_offset_y>
			<model_offset_z>0.0</model_offset_z>
			<model_yaw>0.0</model_yaw>
			<model_pitch>0.0</model_pitch>
			<model_roll>00.0</model_roll>
		</visual>
	</block:class>


	<!-- ========================
		Obstacle blocks
	     ======================== -->
	<block class="square_obstacle">
		<init_pose>6 5 0</init_pose>  <!-- In global coords: x,y, yaw(deg) -->
		<publish>
		  <publish_pose_topic>/${NAME}/pose</publish_pose_topic>
		  <publish_pose_period>50e-3</publish_pose_period>
		</publish>
	</block>
	<block class="obstacle_table">
		<init_pose>7 7 45</init_pose>  <!-- In global coords: x,y, yaw(deg) -->
		<publish>
		  <publish_pose_topic>/${NAME}/pose</publish_pose_topic>
		  <publish_pose_period>50e-3</publish_pose_period>
		</publish>
	</block>

	<!-- Example intangible block, used as a reference for relative pose sensing -->
	<block  name="blockSensor1">
		<shape>
			<pt>-0.05 -0.05</pt>
			<pt>-0.05  0.05</pt>
			<pt> 0.05  0.05</pt>
			<pt> 0.05 -0.05</pt>
		</shape>
		
		<intangible>true</intangible>
		<zmin>0.0</zmin>
		<zmax>0.2</zmax>
	
		<init_pose>2.5 -12 0</init_pose>  <!-- In global coords: x,y, yaw(deg) -->
		<publish>
		  <publish_pose_period>100e-3</publish_pose_period>
		  
		  <!-- Comma separated list of objects, robots, etc. to sense and publish relative poses -->
		  <publish_relative_pose_objects>r1, r2</publish_relative_pose_objects>
		  <publish_relative_pose_topic>/relative_pose_readings</publish_relative_pose_topic>
		</publish>
	</block>

	
	<!-- ========================================================
		Standalone sensors (placed freely on the environment)
	     ======================================================== -->
	<sensor class="laser" name="proximitySensor1">
		<pose>1.3  -18.3  90.0 </pose>
		<fov_degrees>30</fov_degrees>
		<nrays>5</nrays>
		<range_std_noise>0.01</range_std_noise>
		<angle_std_noise_deg>0.01</angle_std_noise_deg>
		<publish>
		  <publish_topic>/${NAME}</publish_topic>
		</publish>
	</sensor>


	<block class="nurse_station">
		<init_pose>15 2 30</init_pose>  <!-- In global coords: x,y, yaw(deg) -->
	</block>

</mvsim_world>

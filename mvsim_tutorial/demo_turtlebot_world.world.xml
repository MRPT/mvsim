<!--
	This "Turtlebot world" world file is intended to mimic
	ROS2 Gazebo world that is launched with:
	ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py
-->
<mvsim_world version="1.0">
	<!-- General simulation options -->
	<simul_timestep>0</simul_timestep> <!-- Simulation fixed-time interval for numerical integration [seconds] or 0 to autodetermine -->

	<!-- <joystick_enabled>true</joystick_enabled> -->

	<!-- GUI options -->
	<gui>
		<ortho>false</ortho>
		<show_forces>false</show_forces>  <force_scale>0.01</force_scale>
		<cam_distance>10</cam_distance>
		<cam_azimuth>180</cam_azimuth>
		<cam_elevation>70</cam_elevation>
		<fov_deg>60</fov_deg>
		<refresh_fps>60</refresh_fps>
		<!-- <follow_vehicle>r1</follow_vehicle> -->
	</gui>

	<!-- Light parameters -->
	<lights>
		<enable_shadows>true</enable_shadows>
		<!-- <shadow_map_size>4096</shadow_map_size> -->
		<light_azimuth_deg>-20.0</light_azimuth_deg>
		<light_elevation_deg>70.0</light_elevation_deg>
		
		<!-- clip planes for shadow calculation -->
		<light_clip_plane_min>0.1</light_clip_plane_min>
		<light_clip_plane_max>100</light_clip_plane_max>
		
		<!-- Tuning parameters for shadow rendering anti acne corrections. These should change if light_clip_* change -->
		<shadow_bias>1e-5</shadow_bias>
		<shadow_bias_cam2frag>1e-5</shadow_bias_cam2frag>
		<shadow_bias_normal>1e-3</shadow_bias_normal>
	</lights>

	<!-- ========================
		   Scenario definition
	     ======================== -->
	<!-- ground -->
	<element class="horizontal_plane">
		<cull_face>BACK</cull_face>
		<x_min>-20</x_min>
		<y_min>-20</y_min>
		<x_max> 20</x_max>
		<y_max> 20</y_max>
		<z>0.0</z>
	</element>


	<!-- =============================
		   Vehicle classes definition
	     ============================= -->
	<include file="../definitions/turtlebot3_burger.vehicle.xml" 
		default_sensors="true"
	/>

	<!-- ========================
		   Vehicle(s) definition
	     ======================== -->
	<vehicle name="r1" class="turtlebot3_burger">
		<init_pose>-2 -0.5 0</init_pose>  <!-- In global coords: x,y, yaw(deg) -->
	</vehicle>

	<!-- ======================================
	      World
	     ====================================== -->
	<walls>
	  <color>#404040</color>
	  <wallThickness>0.3</wallThickness>
	  <wallHeight>1.0</wallHeight>
	  <!-- Walls shape must contain pairs of <pt>s defining wall segments -->
	  <shape>
	    <pt>-3 0</pt> <pt>-2 -2.75</pt>
	    <pt>-2 -2.75</pt> <pt>2 -2.75</pt>
	    <pt>2 -2.75</pt> <pt>3.5 0</pt>
	    <pt>3.5 0</pt> <pt>2 2.75</pt>
	    <pt>2 2.75</pt> <pt>-2 2.75</pt>
	    <pt>-2 2.75</pt> <pt>-3 0</pt>
	  </shape>
	</walls>
	
	<block:class name="green_column_small">
		<static>true</static> <!-- Does not move -->
		<color>#00ff00</color>
		<zmin>0</zmin> <zmax>2</zmax>
		<shape_from_visual/> <!-- automatic collision shape from 3D model -->
		<geometry type="cylinder" radius="0.75" length="2.0" vertex_count="6"/>
	</block:class>

	<block:class name="green_column_large">
		<static>true</static> <!-- Does not move -->
		<color>#00ff00</color>
		<zmin>0</zmin> <zmax>2</zmax>
		<shape_from_visual/> <!-- automatic collision shape from 3D model -->
		<geometry type="cylinder" radius="1.25" length="2.0" vertex_count="6"/>
	</block:class>

	<!-- obstacle columns: radius=0.15m height=0.5m -->
	<block:class name="white_column">
		<static>true</static> <!-- Does not move -->
		<color>#e0e0e0</color>
		<zmin>0</zmin> <zmax>0.5</zmax>
		<shape_from_visual/> <!-- automatic collision shape from 3D model -->
		<geometry type="cylinder" radius="0.15" length="0.5" vertex_count="16"/>
	</block:class>

	<block class="green_column_small"> <init_pose>-2 -2.75 0</init_pose> </block>
	<block class="green_column_small"> <init_pose>+2 -2.75 0</init_pose> </block>
	<block class="green_column_small"> <init_pose>-2 +2.75 0</init_pose> </block>
	<block class="green_column_small"> <init_pose>+2 +2.75 0</init_pose> </block>

	<block class="green_column_large"> <init_pose>3 0 0</init_pose> </block>

	<for var="iX" from="0" to="2">
		<for var="iY" from="0" to="2">
			<block class="white_column">
				<init_pose>$f{1.1*(iX-1)} $f{1.1*(iY-1)} 0</init_pose>
			</block>
		</for>
	</for>

</mvsim_world>
